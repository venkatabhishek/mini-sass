#! /usr/bin/env node

const program = require('commander');
const fs = require('fs');
const path = require('path');
const info = require("../package.json");

const miniSass = require("../lib/index");

var files = {};

program.version(info.name + ' ' + info.version)
program.option('-o, --output <file>', 'Output file (default: STDOUT)');
program.option('-s, --separate', 'Generate separate output file for each input')
program.arguments('<files...>');

program.parse(process.argv);

if (program.args.length) {

    program.args.forEach(pathName => {
        if (fs.existsSync(pathName)) {
            //file exists

            var extension = path.extname(pathName);
            var base = path.basename(pathName, extension);

            files[base] = fs.readFileSync(pathName).toString();

        } else {
            throw "File " + pathName + " does not exist";
        }
    })

    run();

} else {
    // STDIN

    var chunks = [];
    process.stdin.setEncoding("utf8");
    process.stdin.on("data", function (chunk) {
        chunks.push(chunk);
    }).on("end", function () {
        files = [chunks.join("")];
        run();
    });
    process.stdin.resume();

}


function run() {

    for (f in files) {
        files[f] = miniSass.compile(files[f]);
    }

    if (!program.output && !program.separate) {

        console.log(Object.values(files).join("\n "))

    } else {

        if (program.output) {
            fs.writeFileSync(program.output, Object.values(files).join("\n"));
        } else if (program.separate) {
            for (filename in files) {
                fs.writeFileSync(filename+".css", files[filename]);
            }
        }

    }


}

